# Generated by Django 5.2 on 2025-05-02 20:41

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('feedback', '0003_completiontracker_completionevent'),
        ('groups', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField(help_text='Plain text message')),
                ('html_content', models.TextField(blank=True, help_text='HTML content (optional)')),
                ('category', models.CharField(choices=[('notification', 'Notification'), ('report', 'Report'), ('reminder', 'Reminder'), ('welcome', 'Welcome'), ('feedback', 'Feedback'), ('other', 'Other')], default='notification', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('variables', models.JSONField(blank=True, default=dict, help_text='Available variables for this template')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='email_system_templates', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='email_system_templates', to='groups.organization')),
            ],
            options={
                'verbose_name': 'Email Template',
                'verbose_name_plural': 'Email Templates',
                'ordering': ['-is_default', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('html_content', models.TextField(blank=True)),
                ('from_email', models.EmailField(max_length=254)),
                ('to_email', models.EmailField(max_length=254)),
                ('cc_emails', models.TextField(blank=True, help_text='Comma-separated list of CC emails')),
                ('bcc_emails', models.TextField(blank=True, help_text='Comma-separated list of BCC emails')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('sending', 'Sending'), ('sent', 'Sent'), ('failed', 'Failed')], default='draft', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('analysis', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='email_system_emails', to='feedback.aianalysis')),
                ('response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='email_system_emails', to='feedback.response')),
                ('sent_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='email_system_sent_emails', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_emails', to='email_system.emailtemplate')),
            ],
            options={
                'verbose_name': 'Email Log',
                'verbose_name_plural': 'Email Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScheduledEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the scheduled email', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the scheduled email')),
                ('subject_override', models.CharField(blank=True, help_text='Override the template subject (optional)', max_length=255)),
                ('message_override', models.TextField(blank=True, help_text='Override the template message (optional)')),
                ('html_content_override', models.TextField(blank=True, help_text='Override the template HTML content (optional)')),
                ('to_email', models.EmailField(help_text='Primary recipient email', max_length=254)),
                ('cc_emails', models.TextField(blank=True, help_text='Comma-separated list of CC emails')),
                ('bcc_emails', models.TextField(blank=True, help_text='Comma-separated list of BCC emails')),
                ('frequency', models.CharField(choices=[('once', 'One Time'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='once', max_length=20)),
                ('scheduled_time', models.DateTimeField(help_text='When to send the email')),
                ('end_date', models.DateTimeField(blank=True, help_text='When to stop sending recurring emails (optional)', null=True)),
                ('weekday', models.IntegerField(blank=True, choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of the week for weekly emails', null=True)),
                ('day_of_month', models.IntegerField(blank=True, help_text='Day of the month for monthly emails (1-31)', null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('processing', 'Processing'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('error', 'Error')], default='scheduled', max_length=20)),
                ('last_sent', models.DateTimeField(blank=True, help_text='When the email was last sent', null=True)),
                ('next_scheduled', models.DateTimeField(blank=True, help_text='When the next email is scheduled to be sent', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if the email failed to send')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('context_data', models.JSONField(blank=True, default=dict, help_text='Additional context data for template rendering')),
                ('analysis', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scheduled_emails', to='feedback.aianalysis')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_scheduled_emails', to=settings.AUTH_USER_MODEL)),
                ('response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scheduled_emails', to='feedback.response')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_emails', to='email_system.emailtemplate')),
            ],
            options={
                'verbose_name': 'Scheduled Email',
                'verbose_name_plural': 'Scheduled Emails',
                'ordering': ['scheduled_time', 'name'],
                'indexes': [models.Index(fields=['status', 'next_scheduled'], name='email_syste_status_592fab_idx'), models.Index(fields=['frequency'], name='email_syste_frequen_3f1bd5_idx')],
            },
        ),
    ]
