from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.db.models import Q
from django.utils import timezone

from surveys.models import Questionnaire
from feedback.models import Response
from analytics.models import (
    AIModel, AIAnalysisConfiguration, AIAnalysisResult,
    AIInsight, AIFeedback
)

@login_required
def ai_model_list(request):
    """
    Display a list of AI models
    """
    # Only staff can view all AI models
    if not request.user.is_staff:
        messages.error(request, "You don't have permission to view AI models.")
        return redirect('dashboard:admin_dashboard')

    ai_models = AIModel.objects.all()

    # Apply filters if provided
    model_type = request.GET.get('type')
    if model_type:
        ai_models = ai_models.filter(model_type=model_type)

    is_active = request.GET.get('is_active')
    if is_active is not None:
        is_active = is_active.lower() == 'true'
        ai_models = ai_models.filter(is_active=is_active)

    # Paginate the results
    page = request.GET.get('page', 1)
    paginator = Paginator(ai_models, 10)

    try:
        ai_models = paginator.page(page)
    except PageNotAnInteger:
        ai_models = paginator.page(1)
    except EmptyPage:
        ai_models = paginator.page(paginator.num_pages)

    context = {
        'ai_models': ai_models,
        'model_types': AIModel.MODEL_TYPE_CHOICES,
    }

    return render(request, 'analytics/ai/ai_model_list.html', context)

@login_required
def ai_model_create(request):
    """
    Create a new AI model
    """
    # Only staff can create AI models
    if not request.user.is_staff:
        messages.error(request, "You don't have permission to create AI models.")
        return redirect('analytics:ai_model_list')

    if request.method == 'POST':
        name = request.POST.get('name')
        description = request.POST.get('description', '')
        model_type = request.POST.get('model_type')
        version = request.POST.get('version', '1.0')
        is_active = request.POST.get('is_active') == 'on'

        if not name or not model_type:
            messages.error(request, "Name and model type are required.")
            return redirect('analytics:ai_model_create')

        # Create the AI model
        AIModel.objects.create(
            name=name,
            description=description,
            model_type=model_type,
            version=version,
            is_active=is_active,
            created_by=request.user
        )

        messages.success(request, "AI model created successfully.")
        return redirect('analytics:ai_model_list')

    context = {
        'model_types': AIModel.MODEL_TYPE_CHOICES,
    }

    return render(request, 'analytics/ai/ai_model_form.html', context)

@login_required
def ai_model_detail(request, model_id):
    """
    Display details of an AI model
    """
    ai_model = get_object_or_404(AIModel, pk=model_id)

    # Only staff can view AI model details
    if not request.user.is_staff:
        messages.error(request, "You don't have permission to view AI model details.")
        return redirect('dashboard:admin_dashboard')

    # Get configurations for this model
    configurations = AIAnalysisConfiguration.objects.filter(ai_model=ai_model).select_related('questionnaire')

    # Get recent analysis results for this model
    analysis_results = AIAnalysisResult.objects.filter(ai_model=ai_model).select_related('response').order_by('-analyzed_at')[:10]

    # Get insights generated by this model
    insights = AIInsight.objects.filter(ai_model=ai_model).order_by('-created_at')[:10]

    context = {
        'ai_model': ai_model,
        'configurations': configurations,
        'analysis_results': analysis_results,
        'insights': insights,
    }

    return render(request, 'analytics/ai/ai_model_detail.html', context)

@login_required
def ai_model_edit(request, model_id):
    """
    Edit an AI model
    """
    ai_model = get_object_or_404(AIModel, pk=model_id)

    # Only staff can edit AI models
    if not request.user.is_staff:
        messages.error(request, "You don't have permission to edit AI models.")
        return redirect('analytics:ai_model_detail', model_id=model_id)

    if request.method == 'POST':
        name = request.POST.get('name')
        description = request.POST.get('description', '')
        model_type = request.POST.get('model_type')
        version = request.POST.get('version', '1.0')
        is_active = request.POST.get('is_active') == 'on'

        if not name or not model_type:
            messages.error(request, "Name and model type are required.")
            return redirect('analytics:ai_model_edit', model_id=model_id)

        # Update the AI model
        ai_model.name = name
        ai_model.description = description
        ai_model.model_type = model_type
        ai_model.version = version
        ai_model.is_active = is_active
        ai_model.save()

        messages.success(request, "AI model updated successfully.")
        return redirect('analytics:ai_model_detail', model_id=model_id)

    context = {
        'ai_model': ai_model,
        'model_types': AIModel.MODEL_TYPE_CHOICES,
    }

    return render(request, 'analytics/ai/ai_model_form.html', context)

@login_required
def ai_model_delete(request, model_id):
    """
    Delete an AI model
    """
    ai_model = get_object_or_404(AIModel, pk=model_id)

    # Only staff can delete AI models
    if not request.user.is_staff:
        messages.error(request, "You don't have permission to delete AI models.")
        return redirect('analytics:ai_model_detail', model_id=model_id)

    if request.method == 'POST':
        # Delete the AI model
        ai_model.delete()

        messages.success(request, "AI model deleted successfully.")
        return redirect('analytics:ai_model_list')

    context = {
        'ai_model': ai_model,
    }

    return render(request, 'analytics/ai/ai_model_confirm_delete.html', context)

@login_required
def ai_configuration_list(request, questionnaire_id):
    """
    Display a list of AI analysis configurations for a questionnaire
    """
    questionnaire = get_object_or_404(Questionnaire, pk=questionnaire_id)

    # Check if user has permission to view this questionnaire
    if not request.user.is_staff and questionnaire.created_by != request.user:
        if questionnaire.organization:
            # Check if user is a member of the organization
            if not questionnaire.organization.members.filter(user=request.user, is_active=True).exists():
                messages.error(request, "You don't have permission to view AI configurations for this questionnaire.")
                return redirect('surveys:survey_list')
        else:
            messages.error(request, "You don't have permission to view AI configurations for this questionnaire.")
            return redirect('surveys:survey_list')

    configurations = AIAnalysisConfiguration.objects.filter(questionnaire=questionnaire).select_related('ai_model')

    context = {
        'questionnaire': questionnaire,
        'configurations': configurations,
    }

    return render(request, 'analytics/ai/ai_configuration_list.html', context)

@login_required
def ai_configuration_create(request, questionnaire_id):
    """
    Create a new AI analysis configuration for a questionnaire
    """
    questionnaire = get_object_or_404(Questionnaire, pk=questionnaire_id)

    # Check if user has permission to edit this questionnaire
    if not request.user.is_staff and questionnaire.created_by != request.user:
        if questionnaire.organization:
            # Check if user is an admin or manager of the organization
            member = questionnaire.organization.members.filter(user=request.user, is_active=True).first()
            if not member or member.role not in ['admin', 'manager']:
                messages.error(request, "You don't have permission to create AI configurations for this questionnaire.")
                return redirect('analytics:ai_configuration_list', questionnaire_id=questionnaire_id)
        else:
            messages.error(request, "You don't have permission to create AI configurations for this questionnaire.")
            return redirect('analytics:ai_configuration_list', questionnaire_id=questionnaire_id)

    if request.method == 'POST':
        ai_model_id = request.POST.get('ai_model')
        is_enabled = request.POST.get('is_enabled') == 'on'
        auto_analyze = request.POST.get('auto_analyze') == 'on'

        if not ai_model_id:
            messages.error(request, "AI model is required.")
            return redirect('analytics:ai_configuration_create', questionnaire_id=questionnaire_id)

        ai_model = get_object_or_404(AIModel, pk=ai_model_id)

        # Check if a configuration already exists for this model and questionnaire
        if AIAnalysisConfiguration.objects.filter(questionnaire=questionnaire, ai_model=ai_model).exists():
            messages.error(request, "A configuration for this AI model already exists for this questionnaire.")
            return redirect('analytics:ai_configuration_create', questionnaire_id=questionnaire_id)

        # Create the configuration
        AIAnalysisConfiguration.objects.create(
            questionnaire=questionnaire,
            ai_model=ai_model,
            is_enabled=is_enabled,
            auto_analyze=auto_analyze,
            created_by=request.user
        )

        messages.success(request, "AI analysis configuration created successfully.")
        return redirect('analytics:ai_configuration_list', questionnaire_id=questionnaire_id)

    # Get active AI models
    ai_models = AIModel.objects.filter(is_active=True)

    # Get models that already have configurations for this questionnaire
    configured_models = AIAnalysisConfiguration.objects.filter(questionnaire=questionnaire).values_list('ai_model_id', flat=True)

    # Exclude models that already have configurations
    available_models = ai_models.exclude(id__in=configured_models)

    context = {
        'questionnaire': questionnaire,
        'ai_models': available_models,
    }

    return render(request, 'analytics/ai/ai_configuration_form.html', context)

@login_required
def ai_configuration_edit(request, questionnaire_id, config_id):
    """
    Edit an AI analysis configuration
    """
    questionnaire = get_object_or_404(Questionnaire, pk=questionnaire_id)
    configuration = get_object_or_404(AIAnalysisConfiguration, pk=config_id, questionnaire=questionnaire)

    # Check if user has permission to edit this questionnaire
    if not request.user.is_staff and questionnaire.created_by != request.user:
        if questionnaire.organization:
            # Check if user is an admin or manager of the organization
            member = questionnaire.organization.members.filter(user=request.user, is_active=True).first()
            if not member or member.role not in ['admin', 'manager']:
                messages.error(request, "You don't have permission to edit AI configurations for this questionnaire.")
                return redirect('analytics:ai_configuration_list', questionnaire_id=questionnaire_id)
        else:
            messages.error(request, "You don't have permission to edit AI configurations for this questionnaire.")
            return redirect('analytics:ai_configuration_list', questionnaire_id=questionnaire_id)

    if request.method == 'POST':
        is_enabled = request.POST.get('is_enabled') == 'on'
        auto_analyze = request.POST.get('auto_analyze') == 'on'

        # Update the configuration
        configuration.is_enabled = is_enabled
        configuration.auto_analyze = auto_analyze
        configuration.save()

        messages.success(request, "AI analysis configuration updated successfully.")
        return redirect('analytics:ai_configuration_list', questionnaire_id=questionnaire_id)

    context = {
        'questionnaire': questionnaire,
        'configuration': configuration,
    }

    return render(request, 'analytics/ai/ai_configuration_form.html', context)

@login_required
def ai_configuration_delete(request, questionnaire_id, config_id):
    """
    Delete an AI analysis configuration
    """
    questionnaire = get_object_or_404(Questionnaire, pk=questionnaire_id)
    configuration = get_object_or_404(AIAnalysisConfiguration, pk=config_id, questionnaire=questionnaire)

    # Check if user has permission to edit this questionnaire
    if not request.user.is_staff and questionnaire.created_by != request.user:
        if questionnaire.organization:
            # Check if user is an admin of the organization
            member = questionnaire.organization.members.filter(user=request.user, is_active=True).first()
            if not member or member.role != 'admin':
                messages.error(request, "You don't have permission to delete AI configurations for this questionnaire.")
                return redirect('analytics:ai_configuration_list', questionnaire_id=questionnaire_id)
        else:
            messages.error(request, "You don't have permission to delete AI configurations for this questionnaire.")
            return redirect('analytics:ai_configuration_list', questionnaire_id=questionnaire_id)

    if request.method == 'POST':
        # Delete the configuration
        configuration.delete()

        messages.success(request, "AI analysis configuration deleted successfully.")
        return redirect('analytics:ai_configuration_list', questionnaire_id=questionnaire_id)

    context = {
        'questionnaire': questionnaire,
        'configuration': configuration,
    }

    return render(request, 'analytics/ai/ai_configuration_confirm_delete.html', context)

@login_required
def analyze_response(request, response_id):
    """
    Analyze a response using AI
    """
    response = get_object_or_404(Response, pk=response_id)
    questionnaire = response.survey

    # Check if user has permission to view this response
    if not request.user.is_staff and questionnaire.created_by != request.user:
        if questionnaire.organization:
            # Check if user is a member of the organization
            if not questionnaire.organization.members.filter(user=request.user, is_active=True).exists():
                messages.error(request, "You don't have permission to analyze this response.")
                return redirect('surveys:survey_detail', pk=questionnaire.id)
        else:
            messages.error(request, "You don't have permission to analyze this response.")
            return redirect('surveys:survey_detail', pk=questionnaire.id)

    if request.method == 'POST':
        config_id = request.POST.get('configuration')

        if not config_id:
            messages.error(request, "AI configuration is required.")
            return redirect('feedback:response_detail', pk=response_id)

        configuration = get_object_or_404(AIAnalysisConfiguration, pk=config_id, questionnaire=questionnaire)

        if not configuration.is_enabled:
            messages.error(request, "This AI configuration is not enabled.")
            return redirect('feedback:response_detail', pk=response_id)

        try:
            # This is where you would implement the actual AI analysis
            # For now, we'll just create a placeholder result

            # Create the analysis result
            result = AIAnalysisResult.objects.create(
                response=response,
                ai_model=configuration.ai_model,
                configuration=configuration,
                result_data={
                    'status': 'completed',
                    'timestamp': timezone.now().isoformat(),
                    'model_version': configuration.ai_model.version,
                    'analysis': {
                        'sentiment': 'positive',
                        'confidence': 0.85,
                        'keywords': ['helpful', 'satisfied', 'improvement'],
                        'summary': 'The response indicates overall satisfaction with some suggestions for improvement.'
                    }
                },
                summary='The response indicates overall satisfaction with some suggestions for improvement.',
                confidence_score=0.85,
                analyzed_by=request.user
            )

            messages.success(request, "Response analyzed successfully.")
            return redirect('feedback:response_detail', pk=response_id)

        except Exception as e:
            messages.error(request, f"Error analyzing response: {str(e)}")
            return redirect('feedback:response_detail', pk=response_id)

    # Get enabled configurations for this questionnaire
    configurations = AIAnalysisConfiguration.objects.filter(
        questionnaire=questionnaire,
        is_enabled=True
    ).select_related('ai_model')

    context = {
        'response': response,
        'questionnaire': questionnaire,
        'configurations': configurations,
    }

    return render(request, 'analytics/ai/analyze_response.html', context)

@login_required
def analysis_result_detail(request, result_id):
    """
    Display details of an analysis result
    """
    result = get_object_or_404(AIAnalysisResult, pk=result_id)
    response = result.response
    questionnaire = response.survey

    # Check if user has permission to view this response
    if not request.user.is_staff and questionnaire.created_by != request.user:
        if questionnaire.organization:
            # Check if user is a member of the organization
            if not questionnaire.organization.members.filter(user=request.user, is_active=True).exists():
                messages.error(request, "You don't have permission to view this analysis result.")
                return redirect('surveys:survey_detail', pk=questionnaire.id)
        else:
            messages.error(request, "You don't have permission to view this analysis result.")
            return redirect('surveys:survey_detail', pk=questionnaire.id)

    # Get feedback for this result
    feedback = AIFeedback.objects.filter(analysis_result=result).order_by('-provided_at')

    context = {
        'result': result,
        'response': response,
        'questionnaire': questionnaire,
        'feedback': feedback,
    }

    return render(request, 'analytics/ai/analysis_result_detail.html', context)

@login_required
def provide_feedback(request, result_id):
    """
    Provide feedback on an analysis result
    """
    result = get_object_or_404(AIAnalysisResult, pk=result_id)
    response = result.response
    questionnaire = response.survey

    # Check if user has permission to view this response
    if not request.user.is_staff and questionnaire.created_by != request.user:
        if questionnaire.organization:
            # Check if user is a member of the organization
            if not questionnaire.organization.members.filter(user=request.user, is_active=True).exists():
                messages.error(request, "You don't have permission to provide feedback on this analysis result.")
                return redirect('surveys:survey_detail', pk=questionnaire.id)
        else:
            messages.error(request, "You don't have permission to provide feedback on this analysis result.")
            return redirect('surveys:survey_detail', pk=questionnaire.id)

    if request.method == 'POST':
        feedback_type = request.POST.get('feedback_type')
        rating = request.POST.get('rating')
        comments = request.POST.get('comments', '')

        if not feedback_type or not rating:
            messages.error(request, "Feedback type and rating are required.")
            return redirect('analytics:provide_feedback', result_id=result_id)

        # Create the feedback
        AIFeedback.objects.create(
            analysis_result=result,
            feedback_type=feedback_type,
            rating=int(rating),
            comments=comments,
            provided_by=request.user
        )

        messages.success(request, "Feedback provided successfully.")
        return redirect('analytics:analysis_result_detail', result_id=result_id)

    context = {
        'result': result,
        'response': response,
        'questionnaire': questionnaire,
        'feedback_types': AIFeedback.FEEDBACK_TYPE_CHOICES,
    }

    return render(request, 'analytics/ai/provide_feedback.html', context)

@login_required
def ai_insights(request, questionnaire_id):
    """
    Display AI insights for a questionnaire
    """
    questionnaire = get_object_or_404(Questionnaire, pk=questionnaire_id)

    # Check if user has permission to view this questionnaire
    if not request.user.is_staff and questionnaire.created_by != request.user:
        if questionnaire.organization:
            # Check if user is a member of the organization
            if not questionnaire.organization.members.filter(user=request.user, is_active=True).exists():
                messages.error(request, "You don't have permission to view AI insights for this questionnaire.")
                return redirect('surveys:survey_list')
        else:
            messages.error(request, "You don't have permission to view AI insights for this questionnaire.")
            return redirect('surveys:survey_list')

    # Get insights for this questionnaire
    insights = AIInsight.objects.filter(questionnaire=questionnaire, is_archived=False).order_by('-created_at')

    # Apply filters if provided
    insight_type = request.GET.get('type')
    if insight_type:
        insights = insights.filter(insight_type=insight_type)

    severity = request.GET.get('severity')
    if severity:
        insights = insights.filter(severity=severity)

    # Paginate the results
    page = request.GET.get('page', 1)
    paginator = Paginator(insights, 10)

    try:
        insights = paginator.page(page)
    except PageNotAnInteger:
        insights = paginator.page(1)
    except EmptyPage:
        insights = paginator.page(paginator.num_pages)

    context = {
        'questionnaire': questionnaire,
        'insights': insights,
        'insight_types': AIInsight.INSIGHT_TYPE_CHOICES,
        'severity_choices': AIInsight.SEVERITY_CHOICES,
    }

    return render(request, 'analytics/ai/ai_insights.html', context)

@login_required
def ai_insight_detail(request, insight_id):
    """
    Display details of an AI insight
    """
    insight = get_object_or_404(AIInsight, pk=insight_id)
    questionnaire = insight.questionnaire

    # Check if user has permission to view this questionnaire
    if not request.user.is_staff and questionnaire.created_by != request.user:
        if questionnaire.organization:
            # Check if user is a member of the organization
            if not questionnaire.organization.members.filter(user=request.user, is_active=True).exists():
                messages.error(request, "You don't have permission to view this AI insight.")
                return redirect('surveys:survey_list')
        else:
            messages.error(request, "You don't have permission to view this AI insight.")
            return redirect('surveys:survey_list')

    # Get related responses
    related_responses = insight.related_responses.all()

    context = {
        'insight': insight,
        'questionnaire': questionnaire,
        'related_responses': related_responses,
    }

    return render(request, 'analytics/ai/ai_insight_detail.html', context)

@login_required
def archive_insight(request, insight_id):
    """
    Archive an AI insight
    """
    insight = get_object_or_404(AIInsight, pk=insight_id)
    questionnaire = insight.questionnaire

    # Check if user has permission to edit this questionnaire
    if not request.user.is_staff and questionnaire.created_by != request.user:
        if questionnaire.organization:
            # Check if user is an admin or manager of the organization
            member = questionnaire.organization.members.filter(user=request.user, is_active=True).first()
            if not member or member.role not in ['admin', 'manager']:
                messages.error(request, "You don't have permission to archive AI insights for this questionnaire.")
                return redirect('analytics:ai_insight_detail', insight_id=insight_id)
        else:
            messages.error(request, "You don't have permission to archive AI insights for this questionnaire.")
            return redirect('analytics:ai_insight_detail', insight_id=insight_id)

    if request.method == 'POST':
        # Archive the insight
        insight.is_archived = True
        insight.save()

        messages.success(request, "AI insight archived successfully.")
        return redirect('analytics:ai_insights', questionnaire_id=questionnaire.id)

    context = {
        'insight': insight,
        'questionnaire': questionnaire,
    }

    return render(request, 'analytics/ai/archive_insight_confirm.html', context)
