# Generated by Django 5.2 on 2025-05-06 20:00

import django.db.models.deletion
import django.utils.timezone
import surveys.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('feedback', '0001_initial'),
        ('groups', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='QuestionType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('has_choices', models.BooleanField(default=False)),
                ('is_numeric', models.BooleanField(default=False)),
                ('is_text', models.BooleanField(default=False)),
                ('is_date', models.BooleanField(default=False)),
                ('is_file', models.BooleanField(default=False)),
                ('is_scorable', models.BooleanField(default=False)),
                ('default_max_score', models.FloatField(default=0)),
                ('default_scoring_weight', models.FloatField(default=1.0)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('icon', models.CharField(default='fa-question', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Question Type',
                'verbose_name_plural': 'Question Types',
                'db_table': 'surveys_questiontype',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('notification', 'Notification'), ('reminder', 'Reminder'), ('report', 'Report'), ('welcome', 'Welcome'), ('confirmation', 'Confirmation'), ('invitation', 'Invitation'), ('other', 'Other')], default='notification', max_length=20)),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('html_content', models.TextField(blank=True)),
                ('variables', models.JSONField(blank=True, default=list, help_text='List of available template variables')),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_email_templates', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='email_templates', to='groups.organization')),
            ],
            options={
                'verbose_name': 'Email Template',
                'verbose_name_plural': 'Email Templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EmailSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_override', models.CharField(blank=True, help_text='Override the template subject (optional)', max_length=255, null=True)),
                ('recipient_email', models.EmailField(blank=True, help_text='Email address of the recipient (for single recipient)', max_length=254, null=True)),
                ('recipient_name', models.CharField(blank=True, help_text='Name of the recipient (optional)', max_length=255, null=True)),
                ('is_bulk', models.BooleanField(default=False, help_text='Whether this is a bulk email to multiple recipients')),
                ('email_type', models.CharField(blank=True, choices=[('high_risk', 'High Risk Notification'), ('report', 'Member Reports'), ('summary', 'Organization Summary')], help_text='Type of bulk email to send', max_length=20, null=True)),
                ('frequency', models.CharField(choices=[('one_time', 'One Time'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('custom', 'Custom')], default='one_time', max_length=20)),
                ('scheduled_time', models.DateTimeField(help_text='When to send the email')),
                ('end_date', models.DateTimeField(blank=True, help_text='End date for recurring emails (optional)', null=True)),
                ('custom_days', models.CharField(blank=True, help_text='JSON list of days for custom frequency (e.g., [0,3,6] for Sunday, Wednesday, Saturday)', max_length=100, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('last_sent', models.DateTimeField(blank=True, null=True)),
                ('next_send', models.DateTimeField(blank=True, null=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('context_data', models.JSONField(blank=True, default=dict, help_text='JSON data for template variables')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_schedules', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, help_text='Organization for bulk emails', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='email_schedules', to='groups.organization')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='surveys.emailtemplate')),
            ],
            options={
                'verbose_name': 'Email Schedule',
                'verbose_name_plural': 'Email Schedules',
                'ordering': ['-scheduled_time'],
            },
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('subject', models.CharField(max_length=255)),
                ('sent_at', models.DateTimeField()),
                ('content', models.TextField(blank=True, null=True)),
                ('context', models.JSONField(blank=True, default=dict)),
                ('opened', models.BooleanField(default=False)),
                ('opened_at', models.DateTimeField(blank=True, null=True)),
                ('clicked', models.BooleanField(default=False)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('bounced', 'Bounced')], default='sent', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('tracking_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='logs', to='surveys.emailschedule')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='surveys.emailtemplate')),
            ],
            options={
                'verbose_name': 'Email Log',
                'verbose_name_plural': 'Email Logs',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='ScoringSystem',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('scoring_type', models.CharField(choices=[('simple_sum', 'Simple Sum'), ('weighted', 'Weighted Scoring'), ('range_based', 'Range-Based Scoring'), ('z_score', 'Z-Score Normalization'), ('percentile', 'Percentile Ranking'), ('conditional', 'Conditional Scoring'), ('custom', 'Custom Formula')], default='simple_sum', max_length=20)),
                ('formula', models.TextField(blank=True, help_text='Custom formula for scoring (used with custom scoring type)')),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_scoring_systems', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Scoring System',
                'verbose_name_plural': 'Scoring Systems',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScoreRange',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('min_score', models.FloatField()),
                ('max_score', models.FloatField()),
                ('color', models.CharField(default='#3498db', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('interpretation', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('scoring_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_ranges', to='surveys.scoringsystem')),
            ],
            options={
                'verbose_name': 'Score Range',
                'verbose_name_plural': 'Score Ranges',
                'ordering': ['min_score'],
            },
        ),
        migrations.CreateModel(
            name='ResponseScore',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('raw_score', models.FloatField()),
                ('notes', models.TextField(blank=True)),
                ('z_score', models.FloatField(blank=True, null=True)),
                ('percentile', models.FloatField(blank=True, null=True)),
                ('additional_data', models.JSONField(blank=True, help_text='Additional scoring data in JSON format', null=True)),
                ('calculated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='feedback.response')),
                ('score_range', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='response_scores', to='surveys.scorerange')),
                ('scoring_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_scores', to='surveys.scoringsystem')),
            ],
            options={
                'verbose_name': 'Response Score',
                'verbose_name_plural': 'Response Scores',
                'ordering': ['-calculated_at'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedScoringFeedback',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('accuracy_rating', models.PositiveSmallIntegerField(choices=[(1, 'Not accurate'), (2, 'Somewhat accurate'), (3, 'Moderately accurate'), (4, 'Very accurate'), (5, 'Extremely accurate')])),
                ('usefulness_rating', models.PositiveSmallIntegerField(choices=[(1, 'Not useful'), (2, 'Somewhat useful'), (3, 'Moderately useful'), (4, 'Very useful'), (5, 'Extremely useful')])),
                ('preferred_features', models.JSONField(default=list)),
                ('feedback_text', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scoring_feedback', to='feedback.response')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('scoring_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_feedback', to='surveys.scoringsystem')),
            ],
            options={
                'verbose_name': 'Enhanced Scoring Feedback',
                'verbose_name_plural': 'Enhanced Scoring Feedback',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SurveysEmailtemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('html_content', models.TextField(blank=True, null=True)),
                ('variables', models.JSONField(blank=True, default=list)),
                ('category', models.CharField(default='notification', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='surveys_email_templates', to='groups.organization')),
            ],
            options={
                'db_table': 'surveys_emailtemplate_proxy',
            },
        ),
        migrations.CreateModel(
            name='SurveysQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('question_type', models.CharField(default='text', max_length=50)),
                ('required', models.BooleanField(default=True)),
                ('order', models.IntegerField(default=0)),
                ('is_scored', models.BooleanField(default=False)),
                ('is_visible', models.BooleanField(default=True)),
                ('scoring_weight', models.FloatField(default=1.0)),
                ('max_score', models.IntegerField(default=0)),
                ('category', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question_type_obj', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions', to='surveys.questiontype')),
            ],
            options={
                'db_table': 'surveys_question',
            },
        ),
        migrations.CreateModel(
            name='ScoreRule',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('weight', models.FloatField(default=1.0)),
                ('text_score_enabled', models.BooleanField(default=False)),
                ('text_score', models.FloatField(default=0.0)),
                ('conditional_logic', models.JSONField(blank=True, help_text='JSON configuration for conditional scoring logic', null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('scoring_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_rules', to='surveys.scoringsystem')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_rules', to='surveys.surveysquestion')),
            ],
            options={
                'verbose_name': 'Score Rule',
                'verbose_name_plural': 'Score Rules',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SurveysQuestionchoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('order', models.IntegerField(default=0)),
                ('score', models.IntegerField(default=0)),
                ('is_correct', models.BooleanField(default=False)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='surveys.surveysquestion')),
            ],
            options={
                'db_table': 'surveys_questionchoice',
            },
        ),
        migrations.CreateModel(
            name='OptionScore',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('score_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='option_scores', to='surveys.scorerule')),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='option_scores', to='surveys.surveysquestionchoice')),
            ],
            options={
                'verbose_name': 'Option Score',
                'verbose_name_plural': 'Option Scores',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SurveysQuestionnaire',
            fields=[
                ('id', models.CharField(default=surveys.models.SurveysQuestionnaire.generate_uuid_hex, editable=False, max_length=32, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('instructions', models.TextField(blank=True, null=True)),
                ('category', models.CharField(blank=True, choices=[('anxiety', 'Anxiety'), ('depression', 'Depression'), ('stress', 'Stress'), ('general', 'General'), ('mental_health', 'Mental Health'), ('physical_health', 'Physical Health'), ('education', 'Education'), ('customer_satisfaction', 'Customer Satisfaction'), ('employee_feedback', 'Employee Feedback'), ('research', 'Research'), ('clinical_assessment', 'Clinical Assessment'), ('custom', 'Custom')], max_length=50, null=True)),
                ('type', models.CharField(choices=[('standard', 'Standard'), ('assessment', 'Assessment'), ('screening', 'Screening'), ('feedback', 'Feedback'), ('survey', 'Survey'), ('clinical', 'Clinical'), ('research', 'Research'), ('educational', 'Educational'), ('other', 'Other')], default='standard', max_length=50)),
                ('estimated_time', models.PositiveIntegerField(default=10, help_text='Estimated time to complete in minutes')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_adaptive', models.BooleanField(default=False)),
                ('is_qr_enabled', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
                ('allow_anonymous', models.BooleanField(default=True)),
                ('requires_auth', models.BooleanField(default=False)),
                ('version', models.PositiveIntegerField(default=1)),
                ('tags', models.JSONField(default=list)),
                ('language', models.CharField(default='en', max_length=10)),
                ('time_limit', models.PositiveIntegerField(default=0, help_text='Time limit in minutes (0 for no limit)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('qr_code', models.ImageField(blank=True, null=True, upload_to='qr_codes/')),
                ('access_code', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('is_template', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_questionnaires', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questionnaires', to='groups.organization')),
            ],
            options={
                'db_table': 'surveys_questionnaire',
            },
        ),
        migrations.AddField(
            model_name='surveysquestion',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='surveys.surveysquestionnaire'),
        ),
        migrations.CreateModel(
            name='SurveysQrcode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qr_codes', to='surveys.surveysquestionnaire')),
            ],
            options={
                'db_table': 'surveys_qrcode',
            },
        ),
        migrations.AddField(
            model_name='scoringsystem',
            name='questionnaire',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scoring_systems', to='surveys.surveysquestionnaire'),
        ),
        migrations.CreateModel(
            name='SurveysScoringconfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('scoring_method', models.CharField(default='sum', max_length=50)),
                ('max_score', models.IntegerField(default=100)),
                ('passing_score', models.IntegerField(default=60)),
                ('rules', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scoring_configs', to='surveys.surveysquestionnaire')),
            ],
            options={
                'db_table': 'surveys_scoringconfig',
            },
        ),
        migrations.AddIndex(
            model_name='scorerange',
            index=models.Index(fields=['scoring_system'], name='score_range_system_idx'),
        ),
        migrations.AddIndex(
            model_name='scorerange',
            index=models.Index(fields=['min_score'], name='score_range_min_idx'),
        ),
        migrations.AddIndex(
            model_name='scorerange',
            index=models.Index(fields=['max_score'], name='score_range_max_idx'),
        ),
        migrations.AddIndex(
            model_name='responsescore',
            index=models.Index(fields=['response'], name='resp_score_response_idx'),
        ),
        migrations.AddIndex(
            model_name='responsescore',
            index=models.Index(fields=['scoring_system'], name='resp_score_system_idx'),
        ),
        migrations.AddIndex(
            model_name='responsescore',
            index=models.Index(fields=['score_range'], name='resp_score_range_idx'),
        ),
        migrations.AddIndex(
            model_name='responsescore',
            index=models.Index(fields=['calculated_at'], name='resp_score_calc_at_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='responsescore',
            unique_together={('response', 'scoring_system')},
        ),
        migrations.AddIndex(
            model_name='enhancedscoringfeedback',
            index=models.Index(fields=['response'], name='surveys_enh_respons_81adad_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedscoringfeedback',
            index=models.Index(fields=['scoring_system'], name='surveys_enh_scoring_477ca9_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedscoringfeedback',
            index=models.Index(fields=['created_at'], name='surveys_enh_created_579d30_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='enhancedscoringfeedback',
            unique_together={('response', 'scoring_system')},
        ),
        migrations.AddIndex(
            model_name='scorerule',
            index=models.Index(fields=['scoring_system'], name='score_rule_system_idx'),
        ),
        migrations.AddIndex(
            model_name='scorerule',
            index=models.Index(fields=['question'], name='score_rule_question_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='scorerule',
            unique_together={('scoring_system', 'question')},
        ),
        migrations.AddIndex(
            model_name='optionscore',
            index=models.Index(fields=['score_rule'], name='option_score_rule_idx'),
        ),
        migrations.AddIndex(
            model_name='optionscore',
            index=models.Index(fields=['option'], name='option_score_option_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='optionscore',
            unique_together={('score_rule', 'option')},
        ),
        migrations.AddIndex(
            model_name='scoringsystem',
            index=models.Index(fields=['questionnaire'], name='scoring_system_quest_idx'),
        ),
        migrations.AddIndex(
            model_name='scoringsystem',
            index=models.Index(fields=['is_active'], name='scoring_system_active_idx'),
        ),
        migrations.AddIndex(
            model_name='scoringsystem',
            index=models.Index(fields=['is_default'], name='scoring_system_default_idx'),
        ),
    ]
