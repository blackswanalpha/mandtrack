# Generated by Django 5.2 on 2025-05-01 09:29

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('feedback', '0002_initial'),
        ('surveys', '0002_questiontype_alter_question_max_score_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ScoringSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('scoring_type', models.CharField(choices=[('simple_sum', 'Simple Sum'), ('weighted', 'Weighted Scoring'), ('range_based', 'Range-Based Scoring'), ('custom', 'Custom Formula')], default='simple_sum', max_length=20)),
                ('formula', models.TextField(blank=True, help_text='For custom scoring, enter a formula or description of the scoring logic')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_scoring_systems', to=settings.AUTH_USER_MODEL)),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scoring_systems', to='surveys.questionnaire')),
            ],
            options={
                'verbose_name': 'Scoring System',
                'verbose_name_plural': 'Scoring Systems',
                'ordering': ['questionnaire', 'name'],
                'unique_together': {('questionnaire', 'name')},
            },
        ),
        migrations.CreateModel(
            name='ScoreRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(default=1.0, help_text="Weight to apply to this question's score")),
                ('text_score_enabled', models.BooleanField(default=False, help_text='Enable scoring for text answers')),
                ('text_score', models.FloatField(default=0.0, help_text='Score to apply to text answers if enabled')),
                ('notes', models.TextField(blank=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_rules', to='surveys.question')),
                ('scoring_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_rules', to='surveys.scoringsystem')),
            ],
            options={
                'verbose_name': 'Score Rule',
                'verbose_name_plural': 'Score Rules',
                'ordering': ['scoring_system', 'question__order'],
                'unique_together': {('scoring_system', 'question')},
            },
        ),
        migrations.CreateModel(
            name='ScoreRange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('min_score', models.FloatField()),
                ('max_score', models.FloatField()),
                ('description', models.TextField(blank=True)),
                ('interpretation', models.TextField(blank=True, help_text='Clinical interpretation or meaning of this score range')),
                ('color', models.CharField(default='gray', help_text="Color code for visual representation (e.g., 'red', 'yellow', 'green')", max_length=20)),
                ('scoring_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='score_ranges', to='surveys.scoringsystem')),
            ],
            options={
                'verbose_name': 'Score Range',
                'verbose_name_plural': 'Score Ranges',
                'ordering': ['scoring_system', 'min_score'],
            },
        ),
        migrations.CreateModel(
            name='OptionScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0.0)),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='surveys.questionchoice')),
                ('score_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='option_scores', to='surveys.scorerule')),
            ],
            options={
                'verbose_name': 'Option Score',
                'verbose_name_plural': 'Option Scores',
                'ordering': ['score_rule', 'option__order'],
                'unique_together': {('score_rule', 'option')},
            },
        ),
        migrations.CreateModel(
            name='ResponseScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_score', models.FloatField()),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='feedback.response')),
                ('score_range', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='responses', to='surveys.scorerange')),
                ('scoring_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_scores', to='surveys.scoringsystem')),
            ],
            options={
                'verbose_name': 'Response Score',
                'verbose_name_plural': 'Response Scores',
                'ordering': ['-calculated_at'],
                'unique_together': {('response', 'scoring_system')},
            },
        ),
    ]
